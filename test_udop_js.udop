/*
	Copyright 2014 Brian Sturgill

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

			http://www.apache.org/licenses/LICENSE-2.0

			Unless required by applicable law or agreed to in writing, software
			distributed under the License is distributed on an "AS IS" BASIS,
			WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
			See the License for the specific language governing permissions and
			limitations under the License.
*/

var tests_failed = 0;

function test(cond) {
	"use strict";
	if (!cond) {
		tests_failed++;
		try {
			throw new Error("Test failed");
		} catch (e) {
			var l = e.stack.split("\n");
			var err = l[2].trim();
			console.log("Test failed: " + err);
		}
	}
}

function tests_summary() {
	"use strict";
	if (tests_failed > 0) {
		console.log("TESTS FAILED: ", + tests_failed);
		process.exit(1);
	} else {
		console.log("All tests passed.");
	}
}

var Int = (function () {
		"use strict";
    function Int(v) {
        this.value = v;
    }
    Int.prototype.add = function (rhs) {
        return new Int(this.value + rhs.value);
    };
    Int.prototype.sub = function (rhs) {
        return new Int(this.value - rhs.value);
    };
    Int.prototype.mul = function (rhs) {
        return new Int(this.value * rhs.value);
    };
    Int.prototype.div = function (rhs) {
        return new Int(Math.floor(this.value / rhs.value));
    };
    Int.prototype.mod = function (rhs) {
        return new Int(this.value % rhs.value);
    };
    Int.prototype.ge = function (rhs) {
        return this.value >= rhs.value;
    };
    Int.prototype.gt = function (rhs) {
        return this.value > rhs.value;
    };
    Int.prototype.le = function (rhs) {
        return this.value <= rhs.value;
    };
    Int.prototype.lt = function (rhs) {
        return this.value < rhs.value;
    };
    Int.prototype.ne = function (rhs) {
        return this.value !== rhs.value;
    };
    Int.prototype.eq = function (rhs) {
        return this.value === rhs.value;
    };
    return Int;
})();
var a = new Int(5);
var b = new Int(3);
var c = @@ new Int(-3) @@; // Make sure it leaves unary minus alone
var d = @@ new Int(+3) @@; // Make sure it leaves unary plus alone

var l = [a, b];

function dummy0() { return true; }
function dummy1(a) { return true; }
function dummy2(a, b) { return true; }
function dummy3(a, b, c) { return true; }

test(@@ a+
	b === new Int(8) @@); // Test newline after operator
test(@@ c === new Int(-3) @@); // Also tests function call
test(@@ d === b @@);
test(@@ d !== c @@);
test(@@ b <= b @@);
test(@@ b >= b @@);
test(@@ c < d @@);
test(@@ c <= d @@);
test(@@ d > c @@);
test(@@ d >= c @@);
test(@@ a-b*c === new Int(14) @@);
test(@@ (a-b)*c === new Int(-6) @@);
test(@@ a/b === new Int(1) @@);
test(@@ a%b === new Int(2) @@);
test(@@ c.value @@ === -3); // Make sure '.' gets through
test(@@ l[1] === d @@);
test(@@ a < b || a > b @@);
test(@@ !a < b @@);
test(@@ !(a < b) || !(a > b) && b == d @@);
test(@@ "test" @@ === "test"); // Make sure strings pass through
test(@@ "test\"\n" @@ === "test\"\n"); // Make sure strings pass through
test(@@ 'test\'\n' @@ === 'test\'\n'); // Make sure strings pass through
test(@@ -132.3 @@ == -132.3) // Make sure floating point constants pass through
test(@@ +132.3 @@ == +132.3) // Make sure floating point constants pass through
test(@@ 132.3e3 @@ == 132.3e3) // Make sure floating point constants pass through
test(@@ 132.3e-3 @@ == 132.3e-3) // Make sure floating point constants pass through
test(@@ 132.3e+3 @@ == 132.3e+3) // Make sure floating point constants pass through
test(@@ dummy0() @@) // Make sure function call with 0 args works
test(@@ dummy1(1) @@) // Make sure function call with 1 arg works
test(@@ dummy2(1,2) @@) // Make sure function call with 2 args works
test(@@ dummy3(1,2,3) @@) // Make sure function call with 3 args works
test(@@ a<b?false:true @@);
test("@@@".length === 2); // Test delimiter escape
tests_summary();
